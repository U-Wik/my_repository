3 Profiling

3a: using profiling in Spyder

The lines that took longest time:   
per hit: Y.append([random.randint(0,100) for r in range(N+1)])
in total: result[i][j] += X[i][k] * Y[k][j]
...so I would start with the latter.

I get very odd results on memory usage using N=250)
largest increase (0.621 MB) at line:    X.append([random.randint(0,100) for r in range(N)])
but all append-lines increased memory usage.

but then I got negative values in memory usage in the i, j and k loops
mostly negative (-16 GB) in line:   result[i][j] += X[i][k] * Y[k][j]
I have no idea what that means.

3b:
The lines taking most time seem to be
if(d > sqrt(l[j]))
and
if(l[j] % d == 0)
...so these should be targeted first. Possibly precalulate square roots (once).

Memory wise I dont get any increment in memory usage (0.000 MB).
Is that because the overall allocated memory (using Spyder) is large enough anyway?

3c:
Without using numpy (which was introduced in Day 3) I can't see much room for improvement. 
I was expecting that using N and M=N+1 instead of len(X) etc. would give some benefit but it didn't.
I wonder what the reason for that is.

23.0 seconds (best of 3) vs the original 22.9 seconds (best of 3)

